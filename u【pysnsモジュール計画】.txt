【pysnsモジュール計画】

------------------------------------------------------------------------------------------------------------------------
概要

　　今まで作ったシミュレータをモジュール化することによって一つにまとめ
　　簡単にプログラムを書くだけでこれまでのシミュレーションを行なえるようにしたい
　　また拡張性を考慮した実装を施したい
　　つまり、また今後なんらかのルーティングアルゴリズム等が発生した場合に
　　簡単に実装できるようなシミュレーターを作成したい

------------------------------------------------------------------------------------------------------------------------
作成方法

　　three.jsの経験から同じようなプログラムの書き方で実装したい

------------------------------------------------------------------------------------------------------------------------
具体案

pysns Module

Scene = pysns.CreateScene()
Nodes = pysns.CreateNodes(個数, 移動モデル, 個別機能)

Scene.add(Nodes)

作成の流れとしては、とりあえず今までのプログラムのmainの流れからそれぞれを踏まえた上での凡化

環境クラス
ノードクラス
移動モデルクラス
ルーティングクラス

コンフィグで設定するのでなくどう回すかを自分で設定するように関数の引数等に投げる
Sceneのプロパティをどんどん書き足していく感じ、関数やメソッド使って
LDSSは機能そのもの、その機能を持ってないものはそもそも破棄
基本的にパケットのデータ内の区切りは今までどおりセミコロン(;)
各データの区切りはコロン(:)
セキュリティはやはりというべきかいくらデータを暗号化してもなりますしが防げないので
現状は暗号化しない

回数計算
ループ{
　　残り回数計表示
　　セッティング

　　シミュ(実質ループ){
　　　　
　　}
}

機能関係
　　機能をもたないノードはそのパケットを破棄
　　HELLO
　　LocHELLO
　　LDSS

------------------------------------------------------------------------------------------------------------------------
拡張性を考えるならモジュール化、利便性を考えるならコンフィグ形式
というかどっちにも対応できるようにもできなくもないか
拡張性を考えたモジュール化の方で作っておいて、コマンド打つときの引数でどちらにも対応できるプログラムに〜
とまで考えたところでそれって結局管理者目線での拡張性は下がるのか
結局な話、大学機関ということを考えれば勉強目的を含めて一般的利便性よりも拡張性を意識いた方が良いと考える

オブジェクトをSceneにaddするときに各オブジェクトにIDがあればScene側での処理しやすい
Sceneにノードを追加するときはやっぱリスト、と思ったがオブジェクトIDのことあるからそのリストをもったオブジェクトになるか
関数によってaddしなくていいのとかあると逆にわかりにくくなるので全てオブジェクト化必須ということにしたほうが良さそう
考えてもみればms単位での衝突検知は可能


全体をとりまとめるオブジェクト : Scene()
　シーンの実行
　　.Simulation()

エリア情報　　　　　　　　　　 : EnviromentalConditions()
　サイズ x, y
　SFのチェック
　Cell Division & void zone

何を評価するかを指定する関数   : ContentsOfEvaluation()
　定数を引数にて指定
　関数内部の処理的には
　指定された引数全部足して
　まぁ要は最終的にSceneに
　何評価するのか入ればいい
　
途中経過の詳細表示　　　　　　 : PrintInDetail()
　定数を引数にて指定
　関数なくてもおｋ

ノードリストのオブジェクト　　 : NodeListObj() 
　性能やどんな機能を持った
　ノードをいくつ作るかを
　メソッドで指定
　勿論移動関係もここ

シチュエーションの設定　　　　 : Situation()
　ルーティング手法や
　タイミング、回数の指定
　シミュレーション終了時間
　ワンフレーム指定

